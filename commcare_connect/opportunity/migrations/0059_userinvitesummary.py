# Generated by Django 4.2.5 on 2024-09-30 14:21
import django
from django.db import migrations, models
from django_celery_beat.models import CrontabSchedule, PeriodicTask


def create_refresh_materialized_view_task(apps, schema_editor):
    schedule, _ = CrontabSchedule.objects.get_or_create(
        minute="0",
        hour="0",  # At midnight
        day_of_week="*",
        day_of_month="*",
        month_of_year="*",
    )
    PeriodicTask.objects.update_or_create(
        crontab=schedule,
        name="refresh_materialized_view",
        task="commcare_connect.opportunity.tasks.refresh_materialized_view",
    )


def delete_refresh_materialized_view_task(apps, schema_editor):
    PeriodicTask.objects.filter(
        name="refresh_materialized_view",
        task="commcare_connect.opportunity.tasks.refresh_materialized_view",
    ).delete()


class Migration(migrations.Migration):
    dependencies = [
        ("opportunity", "0058_paymentinvoice_payment_invoice"),
    ]

    """This migration exists because we created a materialized view for the `UserInviteSummary` model.
        Django automatically generates migrations for all models present in the application.
        Since `managed = False` and `db_table is provided Django will not create or modify this table in the database.
        However, we still need this migration in the migration script to prevent Django from generating it again when `makemigrations` is run in the future.
        This ensures that the model is recognized without altering the actual database structure."""

    operations = [
        migrations.CreateModel(
            name="UserInviteSummary",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("sms_delivered", "SMS Delivered"),
                            ("sms_not_delivered", "SMS Not Delivered"),
                            ("accepted", "Accepted"),
                            ("invited", "Invited"),
                            ("not_found", "ConnectID Not Found"),
                        ],
                        default="invited",
                        max_length=50,
                    ),
                ),
                ("last_visit_date", models.DateTimeField(blank=True, null=True)),
                ("date_deliver_started", models.DateTimeField(blank=True, null=True)),
                ("passed_assessment", models.IntegerField(default=0)),
                ("completed_modules_count", models.IntegerField(default=0)),
                ("job_claimed", models.DateTimeField(null=True)),
                ("date_learn_completed", models.DateTimeField(null=True)),
                (
                    "opportunity",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="opportunity.opportunity"),
                ),
                (
                    "opportunity_access",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="opportunity.opportunityaccess",
                    ),
                ),
            ],
            options={
                "db_table": "opportunity_userinvite_summary",
                "managed": False,
            },
        ),
        migrations.RunSQL(
            sql="""
                    CREATE MATERIALIZED VIEW opportunity_userinvite_summary AS
                    WITH total_learning_modules AS (
                    SELECT
                        app_id,
                        COUNT(*) AS total_modules_count
                    FROM
                        opportunity_learnmodule
                    GROUP BY
                        app_id
                )
                SELECT
                    userinvite.id AS id,
                    userinvite.status AS status,
                    userinvite.opportunity_access_id AS opportunity_access_id,
                    userinvite.opportunity_id AS opportunity_id,
                    MAX(uservisit.visit_date) FILTER (WHERE uservisit.opportunity_id = opp.id AND uservisit.status != 'trial') AS last_visit_date,
                    MIN(uservisit.visit_date) FILTER (WHERE uservisit.opportunity_id = opp.id) AS date_deliver_started,
                    SUM(CASE WHEN assessment.opportunity_id = opp.id AND assessment.passed = TRUE THEN 1 ELSE 0 END) AS passed_assessment,
                    COUNT(DISTINCT completedmodule.id) FILTER (WHERE completedmodule.opportunity_id = opp.id) AS completed_modules_count,
                    CASE WHEN claim.id IS NOT NULL THEN claim.date_claimed END AS job_claimed,
                    CASE
                        WHEN COUNT(completedmodule.id) = learning_module.total_modules_count THEN
                            MAX(completedmodule.date) FILTER (WHERE completedmodule.opportunity_id = opp.id)
                    END AS date_learn_completed
                FROM
                    opportunity_userinvite AS userinvite
                JOIN
                    opportunity_opportunityaccess AS access ON userinvite.opportunity_access_id = access.id
                JOIN
                    users_user AS _user ON access.user_id = _user.id
                LEFT JOIN
                    opportunity_uservisit AS uservisit ON _user.id = uservisit.user_id
                LEFT JOIN
                    opportunity_assessment AS assessment ON _user.id = assessment.user_id
                LEFT JOIN
                    opportunity_completedmodule AS completedmodule ON completedmodule.user_id = _user.id
                LEFT JOIN
                    opportunity_opportunityclaim AS claim ON access.id = claim.opportunity_access_id
                JOIN
                    opportunity_opportunity AS opp ON userinvite.opportunity_id = opp.id
                JOIN
                    total_learning_modules AS learning_module ON learning_module.app_id = opp.learn_app_id
                GROUP BY
                    userinvite.id, _user.id, claim.id, learning_module.total_modules_count, userinvite.opportunity_access_id;
                    """,
            reverse_sql="DROP MATERIALIZED VIEW IF EXISTS opportunity_userinvite_summary;",
        ),
        migrations.CreateModel(
            name="OpportunityDeliverySummary",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("approved", models.IntegerField(default=0)),
                ("pending", models.IntegerField(default=0)),
                ("rejected", models.IntegerField(default=0)),
                ("over_limit", models.IntegerField(default=0)),
                ("incomplete", models.IntegerField(default=0)),
                ("completed", models.IntegerField(default=0)),
                ("payment_unit", models.CharField(max_length=255)),
                (
                    "opportunity",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="opportunity.opportunity"),
                ),
                (
                    "user",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="users.user"),
                ),
                (
                    "opportunity_access",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="opportunity.opportunityaccess",
                    ),
                ),
            ],
            options={
                "db_table": "opportunity_delivery_summary",
                "managed": False,
            },
        ),
        migrations.RunSQL(
            sql="""
                    CREATE MATERIALIZED VIEW opportunity_delivery_summary AS
                    SELECT
                        access.id AS id,
                        access.id AS opportunity_access_id,
                        access.opportunity_id AS opportunity_id,
                        access.user_id AS user_id,
                        payment_unit.name AS payment_unit,

                        COUNT(DISTINCT CASE WHEN completed_work.status = 'pending'
                                            AND completed_work.opportunity_access_id = access.id
                                            AND completed_work.payment_unit_id = payment_unit.id THEN completed_work.id END) AS pending,

                        COUNT(DISTINCT CASE WHEN completed_work.status = 'approved'
                                            AND completed_work.opportunity_access_id = access.id
                                            AND completed_work.payment_unit_id = payment_unit.id THEN completed_work.id END) AS approved,

                        COUNT(DISTINCT CASE WHEN completed_work.status = 'rejected'
                                            AND completed_work.opportunity_access_id = access.id
                                            AND completed_work.payment_unit_id = payment_unit.id THEN completed_work.id END) AS rejected,

                        COUNT(DISTINCT CASE WHEN completed_work.status = 'over_limit'
                                            AND completed_work.opportunity_access_id = access.id
                                            AND completed_work.payment_unit_id = payment_unit.id THEN completed_work.id END) AS over_limit,

                        COUNT(DISTINCT CASE WHEN completed_work.status = 'incomplete'
                                            AND completed_work.opportunity_access_id = access.id
                                            AND completed_work.payment_unit_id = payment_unit.id THEN completed_work.id END) AS incomplete,

                        COALESCE(
                            COUNT(DISTINCT CASE WHEN completed_work.status IN ('approved', 'rejected', 'pending', 'over_limit')
                                                AND completed_work.opportunity_access_id = access.id
                                                AND completed_work.payment_unit_id = payment_unit.id THEN completed_work.id END),
                            0
                        ) AS completed
                    FROM
                        opportunity_opportunityaccess AS access
                    LEFT JOIN
                        opportunity_completedwork AS completed_work ON access.id = completed_work.opportunity_access_id
                    LEFT JOIN
                        opportunity_paymentunit AS payment_unit ON completed_work.payment_unit_id = payment_unit.id
                    INNER JOIN
                        users_user AS _user ON access.user_id = _user.id
                    GROUP BY
                        access.id,
                        _user.id,
                        payment_unit.name;
                    """,
            reverse_sql="DROP MATERIALIZED VIEW IF EXISTS opportunity_delivery_summary;",
        ),
        migrations.RunPython(create_refresh_materialized_view_task, delete_refresh_materialized_view_task),
    ]
